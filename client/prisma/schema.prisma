// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// use npx prisma migrate dev --name {migrationName} 
// to create new migrations after updating schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())
  username String
  email String
  password String
  bottles Inventory[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Bottle {
  id String @id @default(uuid())
  name String
  size Int
  category BottleCategory @relation(fields: [categoryId], references: [id])
  categoryId String
  ownedBy Inventory[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cocktail {
  id String @id @default(uuid())
  name String
  instructions String
  category CocktialCategory @relation(fields: [categoryId], references: [id])
  categoryId String
  ingredients Ingredient[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BottleCategory {
  id String @id @default(uuid())
  name String
  bottles Bottle[]
  cocktails Ingredient[]
}

model CocktialCategory {
  id String @id @default(uuid())
  name String
  cocktails Cocktail[]
}

model Ingredient {
  bottleType BottleCategory @relation(fields: [bottleCategoryId], references: [id])
  bottleCategoryId String
  amount Int
  cocktail Cocktail @relation(fields: [cocktailId], references: [id])
  cocktailId String
  assignedAt DateTime @default(now())
  @@id([bottleCategoryId, cocktailId])
}

model Inventory {
  user User @relation(fields: [userId], references: [id])
  userId String
  bottle Bottle @relation(fields: [bottleId], references: [id])
  bottleId String
  remainingAmount Int
  assignedAt DateTime @default(now())

  @@id([userId, bottleId])
}